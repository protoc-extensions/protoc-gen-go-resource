// Code generated by protoc-gen-go-resource. DO NOT EDIT.
package namefield

import (
	"fmt"
	"strings"
)

type ParsedPersonName struct {
	PersonID string
}

func ParsePersonName(s string) (ParsedPersonName, error) {
	p := strings.Split(s, "/")
	if len(p) != 2 {
		return ParsedPersonName{}, fmt.Errorf("parse %q: bad number of segments, want: 2, got: %d", s, len(p))
	}

	var out ParsedPersonName

	if p[0] != "persons" {
		return ParsedPersonName{}, fmt.Errorf("parse %q: bad segment 0, want: %q, got: %q", s, "persons", p[0])
	}

	out.PersonID = p[1]

	return out, nil
}

func ParseFullPersonName(s string) (ParsedPersonName, error) {
	if !strings.HasPrefix(s, "//example.com/") {
		return ParsedPersonName{}, fmt.Errorf("parse %q: invalid prefix, want: %q", s, "//example.com/")
	}

	return ParsePersonName(strings.TrimPrefix(s, "//example.com/"))
}

func (n ParsedPersonName) Name() string {
	var out string

	out += "persons"

	out += "/"

	out += n.PersonID

	return out
}

func (n ParsedPersonName) FullName() string {
	return "//example.com/" + n.Name()
}

func (x *Person) ParsePersonName() (ParsedPersonName, error) {
	return ParsePersonName(x.PersonName)
}
