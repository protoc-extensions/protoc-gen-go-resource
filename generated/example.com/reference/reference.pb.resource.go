// Code generated by protoc-gen-go-resource. DO NOT EDIT.
package reference

import (
	external "example.com/external"
	simple "example.com/simple"
)

import (
	"fmt"
	"strings"
)

type ParsedFooName struct {
	FooID string
}

func ParseFooName(s string) (ParsedFooName, error) {
	p := strings.Split(s, "/")
	if len(p) != 2 {
		return ParsedFooName{}, fmt.Errorf("parse %q: bad number of segments, want: 2, got: %d", s, len(p))
	}

	var out ParsedFooName

	if p[0] != "foos" {
		return ParsedFooName{}, fmt.Errorf("parse %q: bad segment 0, want: %q, got: %q", s, "foos", p[0])
	}

	out.FooID = p[1]

	return out, nil
}

func ParseFullFooName(s string) (ParsedFooName, error) {
	if !strings.HasPrefix(s, "//example.com/") {
		return ParsedFooName{}, fmt.Errorf("parse %q: invalid prefix, want: %q", s, "//example.com/")
	}

	return ParseFooName(strings.TrimPrefix(s, "//example.com/"))
}

func (n ParsedFooName) Name() string {
	var out string

	out += "foos"

	out += "/"

	out += n.FooID

	return out
}

func (n ParsedFooName) FullName() string {
	return "//example.com/" + n.Name()
}

type ParsedBarName struct {
	BarID string
}

func ParseBarName(s string) (ParsedBarName, error) {
	p := strings.Split(s, "/")
	if len(p) != 2 {
		return ParsedBarName{}, fmt.Errorf("parse %q: bad number of segments, want: 2, got: %d", s, len(p))
	}

	var out ParsedBarName

	if p[0] != "bars" {
		return ParsedBarName{}, fmt.Errorf("parse %q: bad segment 0, want: %q, got: %q", s, "bars", p[0])
	}

	out.BarID = p[1]

	return out, nil
}

func ParseFullBarName(s string) (ParsedBarName, error) {
	if !strings.HasPrefix(s, "//example.com/") {
		return ParsedBarName{}, fmt.Errorf("parse %q: invalid prefix, want: %q", s, "//example.com/")
	}

	return ParseBarName(strings.TrimPrefix(s, "//example.com/"))
}

func (n ParsedBarName) Name() string {
	var out string

	out += "bars"

	out += "/"

	out += n.BarID

	return out
}

func (n ParsedBarName) FullName() string {
	return "//example.com/" + n.Name()
}

func (x *Foo) ParseName() (ParsedFooName, error) {
	return ParseFooName(x.Name)
}

func (x *Foo) ParseBar() (ParsedBarName, error) {
	return ParseBarName(x.Bar)
}

func (x *Bar) ParseName() (ParsedBarName, error) {
	return ParseBarName(x.Name)
}

func (x *Bar) ParseFoo() (ParsedFooName, error) {
	return ParseFooName(x.Foo)
}

func (x *CrossPackage) ParseThingName() (simple.ParsedThingName, error) {
	return simple.ParseThingName(x.ThingName)
}

func (x *CrossPackageExternal) ParseExternalName() (external.ParsedExternalName, error) {
	return external.ParseExternalName(x.ExternalName)
}
