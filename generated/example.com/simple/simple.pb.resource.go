// Code generated by protoc-gen-go-resource. DO NOT EDIT.
package simple

import (
	"fmt"
	"strings"
)

type ParsedThingName struct {
	ThingID string
}

func ParseThingName(s string) (ParsedThingName, error) {
	p := strings.Split(s, "/")
	if len(p) != 2 {
		return ParsedThingName{}, fmt.Errorf("parse %q: bad number of segments, want: 2, got: %d", s, len(p))
	}

	var out ParsedThingName

	if p[0] != "things" {
		return ParsedThingName{}, fmt.Errorf("parse %q: bad segment 0, want: %q, got: %q", s, "things", p[0])
	}

	out.ThingID = p[1]

	return out, nil
}

func ParseFullThingName(s string) (ParsedThingName, error) {
	if !strings.HasPrefix(s, "//example.com/") {
		return ParsedThingName{}, fmt.Errorf("parse %q: invalid prefix, want: %q", s, "//example.com/")
	}

	return ParseThingName(strings.TrimPrefix(s, "//example.com/"))
}

func (n ParsedThingName) Name() string {
	var out string

	out += "things"

	out += "/"

	out += n.ThingID

	return out
}

func (n ParsedThingName) FullName() string {
	return "//example.com/" + n.Name()
}

type ParsedProjectThingName struct {
	ProjectID string

	ThingID string
}

func ParseProjectThingName(s string) (ParsedProjectThingName, error) {
	p := strings.Split(s, "/")
	if len(p) != 4 {
		return ParsedProjectThingName{}, fmt.Errorf("parse %q: bad number of segments, want: 4, got: %d", s, len(p))
	}

	var out ParsedProjectThingName

	if p[0] != "projects" {
		return ParsedProjectThingName{}, fmt.Errorf("parse %q: bad segment 0, want: %q, got: %q", s, "projects", p[0])
	}

	out.ProjectID = p[1]

	if p[2] != "things" {
		return ParsedProjectThingName{}, fmt.Errorf("parse %q: bad segment 2, want: %q, got: %q", s, "things", p[2])
	}

	out.ThingID = p[3]

	return out, nil
}

func ParseFullProjectThingName(s string) (ParsedProjectThingName, error) {
	if !strings.HasPrefix(s, "//example.com/") {
		return ParsedProjectThingName{}, fmt.Errorf("parse %q: invalid prefix, want: %q", s, "//example.com/")
	}

	return ParseProjectThingName(strings.TrimPrefix(s, "//example.com/"))
}

func (n ParsedProjectThingName) Name() string {
	var out string

	out += "projects"

	out += "/"

	out += n.ProjectID

	out += "/"

	out += "things"

	out += "/"

	out += n.ThingID

	return out
}

func (n ParsedProjectThingName) FullName() string {
	return "//example.com/" + n.Name()
}

func (x *Thing) ParseName() (ParsedThingName, error) {
	return ParseThingName(x.Name)
}

func (x *ProjectThing) ParseName() (ParsedProjectThingName, error) {
	return ParseProjectThingName(x.Name)
}
